//16.07.27.11:45 - start
//16.07.27.11:55 - pseudo done, debugging iterative
//16.07.27.12:05 - just reduced iterative code in half
//16.07.27.12:15 - debugging recursive
//

/*
Pseudo
<template><class type_a>
bool symetric_r (type_a *p, int a, int b)


//p points to an array
//a = start of array, or starting element
//b = ending element



if a == b return true

else 
{
    if a > b, a = temp, a = b, b = temp;
    if b = a + 1 return (p[a] == p[b])
    return (p[a]==p[b]) && symetric(p, a+1, b-1)
}

6
012345
abccba

7
0123456
abcdcba

n = 6
call stack:
    symetric_r(p, 0, 5)
    ↵return (p[0]==p[5]) && symetric_r(p, 1, 4) 
                            ↵return (p[1]==p[4]) && symetric_r(p, 2, 3)
                                                    ↵return (p[2]==p[3])

resolved call stack:
symetric_r(p, 0, 5)
↵return (p[0]==p[5]) && symetric_r(p, 1, 4) 
                        ↵return (p[1]==p[4]) && symetric_r(p, 2, 3)
                                                ↵return true                                                    


symetric_r(p, 0, 5)
    ↵return (p[0]==p[5]) && symetric_r(p, 1, 4) 
                            ↵return true && true

symetric_r(p, 0, 5)
    ↵return true && true

true


6
012345
abccba

7
0123456
abcdcba

bool symetric_i (type_a *p, int n)
bool isSymetric;

if n%2 == 0
    for i = 0; i < n/2 + 0, i++
        isSymetric = (p[i] == p[(n-1)-i]);

n = 6
n/2 = 3
i = 0       pi = 0  p(n-1)-i = 5
i = 1       pi = 1  p(n-1)-i = 4
i = 2       pi = 2  p(n-1)-i = 3


if n%2 == 1
    for i = 0; i < n/2 + 1, i++
        isSymetric = (p[i] == p[(n-1)-i]);
return isSymetric

n = 7
n/2 + 1 = 4
i = 0       pi = 0  p(n-1)-i = 7
i = 1       pi = 1  p(n-1)-i = 6
i = 2       pi = 2  p(n-1)-i = 5
i = 3       pi = 3  p(n-1)-i = 4



bool symetric_i (type_a *p, int n)
bool isSymetric;
    for i = 0; i < n/2 + n%2, i++
        isSymetric = (p[i] == p[(n-1)-i]);

*/